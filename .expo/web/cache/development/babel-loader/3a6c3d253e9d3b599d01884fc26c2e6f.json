{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from \"./TouchableItem\";\n\nvar DrawerNavigatorItems = function (_React$Component) {\n  _inherits(DrawerNavigatorItems, _React$Component);\n\n  var _super = _createSuper(DrawerNavigatorItems);\n\n  function DrawerNavigatorItems() {\n    var _this;\n\n    _classCallCheck(this, DrawerNavigatorItems);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"context\", void 0);\n\n    return _this;\n  }\n\n  _createClass(DrawerNavigatorItems, [{\n    key: \"getActiveTintColor\",\n    value: function getActiveTintColor() {\n      var activeTintColor = this.props.activeTintColor;\n\n      if (!activeTintColor) {\n        return;\n      } else if (typeof activeTintColor === 'string') {\n        return activeTintColor;\n      }\n\n      return activeTintColor[this.context];\n    }\n  }, {\n    key: \"getInactiveTintColor\",\n    value: function getInactiveTintColor() {\n      var inactiveTintColor = this.props.inactiveTintColor;\n\n      if (!inactiveTintColor) {\n        return;\n      } else if (typeof inactiveTintColor === 'string') {\n        return inactiveTintColor;\n      }\n\n      return inactiveTintColor[this.context];\n    }\n  }, {\n    key: \"getActiveBackgroundColor\",\n    value: function getActiveBackgroundColor() {\n      var activeBackgroundColor = this.props.activeBackgroundColor;\n\n      if (!activeBackgroundColor) {\n        return;\n      } else if (typeof activeBackgroundColor === 'string') {\n        return activeBackgroundColor;\n      }\n\n      return activeBackgroundColor[this.context];\n    }\n  }, {\n    key: \"getInactiveBackgroundColor\",\n    value: function getInactiveBackgroundColor() {\n      var inactiveBackgroundColor = this.props.inactiveBackgroundColor;\n\n      if (!inactiveBackgroundColor) {\n        return;\n      } else if (typeof inactiveBackgroundColor === 'string') {\n        return inactiveBackgroundColor;\n      }\n\n      return inactiveBackgroundColor[this.context];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          items = _this$props.items,\n          activeItemKey = _this$props.activeItemKey,\n          getLabel = _this$props.getLabel,\n          renderIcon = _this$props.renderIcon,\n          onItemPress = _this$props.onItemPress,\n          itemsContainerStyle = _this$props.itemsContainerStyle,\n          itemStyle = _this$props.itemStyle,\n          labelStyle = _this$props.labelStyle,\n          activeLabelStyle = _this$props.activeLabelStyle,\n          inactiveLabelStyle = _this$props.inactiveLabelStyle,\n          iconContainerStyle = _this$props.iconContainerStyle,\n          drawerPosition = _this$props.drawerPosition;\n      var activeTintColor = this.getActiveTintColor();\n      var activeBackgroundColor = this.getActiveBackgroundColor();\n      var inactiveTintColor = this.getInactiveTintColor();\n      var inactiveBackgroundColor = this.getInactiveBackgroundColor();\n      return React.createElement(View, {\n        style: [styles.container, itemsContainerStyle]\n      }, items.map(function (route, index) {\n        var _forceInset;\n\n        var focused = activeItemKey === route.key;\n        var color = focused ? activeTintColor : inactiveTintColor;\n        var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n        var scene = {\n          route: route,\n          index: index,\n          focused: focused,\n          tintColor: color\n        };\n        var icon = renderIcon(scene);\n        var label = getLabel(scene);\n        var accessibilityLabel = typeof label === 'string' ? label : undefined;\n        var extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n        return React.createElement(TouchableItem, {\n          key: route.key,\n          accessible: true,\n          accessibilityLabel: accessibilityLabel,\n          onPress: function onPress() {\n            onItemPress({\n              route: route,\n              focused: focused\n            });\n          },\n          delayPressIn: 0\n        }, React.createElement(SafeAreaView, {\n          style: [{\n            backgroundColor: backgroundColor\n          }, styles.item, itemStyle],\n          forceInset: (_forceInset = {}, _defineProperty2(_forceInset, drawerPosition, 'always'), _defineProperty2(_forceInset, drawerPosition === 'left' ? 'right' : 'left', 'never'), _defineProperty2(_forceInset, \"vertical\", 'never'), _forceInset)\n        }, icon ? React.createElement(View, {\n          style: [styles.icon, focused ? null : styles.inactiveIcon, iconContainerStyle]\n        }, icon) : null, typeof label === 'string' ? React.createElement(Text, {\n          style: [styles.label, {\n            color: color\n          }, labelStyle, extraLabelStyle]\n        }, label) : label));\n      }));\n    }\n  }]);\n\n  return DrawerNavigatorItems;\n}(React.Component);\n\nexport { DrawerNavigatorItems as default };\n\n_defineProperty(DrawerNavigatorItems, \"defaultProps\", {\n  activeTintColor: {\n    light: '#2196f3',\n    dark: '#fff'\n  },\n  activeBackgroundColor: {\n    light: 'rgba(0, 0, 0, .04)',\n    dark: 'rgba(255, 255, 255, .04)'\n  },\n  inactiveTintColor: {\n    light: 'rgba(0, 0, 0, .87)',\n    dark: 'rgba(255, 255, 255, .87)'\n  },\n  inactiveBackgroundColor: {\n    light: 'transparent',\n    dark: 'transparent'\n  }\n});\n\n_defineProperty(DrawerNavigatorItems, \"contextType\", ThemeContext);\n\nvar styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center'\n  },\n  inactiveIcon: {\n    opacity: 0.62\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["DrawerNavigatorItems.tsx"],"names":["DrawerNavigatorItems","React","activeTintColor","light","dark","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","ThemeContext","render","drawerPosition","styles","focused","activeItemKey","route","color","backgroundColor","scene","index","tintColor","icon","renderIcon","label","getLabel","accessibilityLabel","extraLabelStyle","onItemPress","container","paddingVertical","item","flexDirection","alignItems","marginHorizontal","width","inactiveIcon","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { SafeAreaView, ThemeContext } from 'react-navigation';\nimport TouchableItem from './TouchableItem';\nimport { DrawerNavigatorItemsProps } from '../types';\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default class DrawerNavigatorItems extends React.Component<\n  DrawerNavigatorItemsProps\n> {\n  /* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\n  static defaultProps = {\n    activeTintColor: {\n      light: '#2196f3',\n      dark: '#fff',\n    },\n    activeBackgroundColor: {\n      light: 'rgba(0, 0, 0, .04)',\n      dark: 'rgba(255, 255, 255, .04)',\n    },\n    inactiveTintColor: {\n      light: 'rgba(0, 0, 0, .87)',\n      dark: 'rgba(255, 255, 255, .87)',\n    },\n    inactiveBackgroundColor: {\n      light: 'transparent',\n      dark: 'transparent',\n    },\n  };\n\n  static contextType = ThemeContext;\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private getActiveTintColor() {\n    let { activeTintColor } = this.props;\n    if (!activeTintColor) {\n      return;\n    } else if (typeof activeTintColor === 'string') {\n      return activeTintColor;\n    }\n\n    return activeTintColor[this.context];\n  }\n\n  private getInactiveTintColor() {\n    let { inactiveTintColor } = this.props;\n    if (!inactiveTintColor) {\n      return;\n    } else if (typeof inactiveTintColor === 'string') {\n      return inactiveTintColor;\n    }\n\n    return inactiveTintColor[this.context];\n  }\n\n  private getActiveBackgroundColor() {\n    let { activeBackgroundColor } = this.props;\n    if (!activeBackgroundColor) {\n      return;\n    } else if (typeof activeBackgroundColor === 'string') {\n      return activeBackgroundColor;\n    }\n\n    return activeBackgroundColor[this.context];\n  }\n\n  private getInactiveBackgroundColor() {\n    let { inactiveBackgroundColor } = this.props;\n    if (!inactiveBackgroundColor) {\n      return;\n    } else if (typeof inactiveBackgroundColor === 'string') {\n      return inactiveBackgroundColor;\n    }\n\n    return inactiveBackgroundColor[this.context];\n  }\n\n  render() {\n    const {\n      items,\n      activeItemKey,\n      getLabel,\n      renderIcon,\n      onItemPress,\n      itemsContainerStyle,\n      itemStyle,\n      labelStyle,\n      activeLabelStyle,\n      inactiveLabelStyle,\n      iconContainerStyle,\n      drawerPosition,\n    } = this.props;\n\n    const activeTintColor = this.getActiveTintColor();\n    const activeBackgroundColor = this.getActiveBackgroundColor();\n    const inactiveTintColor = this.getInactiveTintColor();\n    const inactiveBackgroundColor = this.getInactiveBackgroundColor();\n\n    return (\n      <View style={[styles.container, itemsContainerStyle]}>\n        {items.map((route, index: number) => {\n          const focused = activeItemKey === route.key;\n          const color = focused ? activeTintColor : inactiveTintColor;\n          const backgroundColor = focused\n            ? activeBackgroundColor\n            : inactiveBackgroundColor;\n          const scene = { route, index, focused, tintColor: color };\n          const icon = renderIcon(scene);\n          const label = getLabel(scene);\n          const accessibilityLabel =\n            typeof label === 'string' ? label : undefined;\n          const extraLabelStyle = focused\n            ? activeLabelStyle\n            : inactiveLabelStyle;\n          return (\n            <TouchableItem\n              key={route.key}\n              accessible\n              accessibilityLabel={accessibilityLabel}\n              onPress={() => {\n                onItemPress({ route, focused });\n              }}\n              delayPressIn={0}\n            >\n              <SafeAreaView\n                style={[{ backgroundColor }, styles.item, itemStyle]}\n                forceInset={{\n                  [drawerPosition]: 'always',\n                  [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n                  vertical: 'never',\n                }}\n              >\n                {icon ? (\n                  <View\n                    style={[\n                      styles.icon,\n                      focused ? null : styles.inactiveIcon,\n                      iconContainerStyle,\n                    ]}\n                  >\n                    {icon}\n                  </View>\n                ) : null}\n                {typeof label === 'string' ? (\n                  <Text\n                    style={[\n                      styles.label,\n                      { color },\n                      labelStyle,\n                      extraLabelStyle,\n                    ]}\n                  >\n                    {label}\n                  </Text>\n                ) : (\n                  label\n                )}\n              </SafeAreaView>\n            </TouchableItem>\n          );\n        })}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}