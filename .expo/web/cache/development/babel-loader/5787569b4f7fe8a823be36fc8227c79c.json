{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { SwitchRouter, NavigationActions } from 'react-navigation';\nimport * as DrawerActions from \"./DrawerActions\";\n\nfunction withDefaultValue(obj, key, defaultValue) {\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  obj[key] = defaultValue;\n  return obj;\n}\n\nvar getActiveRouteKey = function getActiveRouteKey(route) {\n  if (route.routes && typeof route.index === 'number' && route.routes[route.index]) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = _objectSpread({}, config);\n  config = withDefaultValue(config, 'resetOnBlur', config.unmountInactiveRoutes ? true : !!config.resetOnBlur);\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n  var switchRouter = SwitchRouter(routeConfigs, config);\n  return _objectSpread(_objectSpread({}, switchRouter), {}, {\n    getActionCreators: function getActionCreators(route, navStateKey) {\n      return _objectSpread({\n        openDrawer: function openDrawer() {\n          return DrawerActions.openDrawer({\n            key: navStateKey\n          });\n        },\n        closeDrawer: function closeDrawer() {\n          return DrawerActions.closeDrawer({\n            key: navStateKey\n          });\n        },\n        toggleDrawer: function toggleDrawer() {\n          return DrawerActions.toggleDrawer({\n            key: navStateKey\n          });\n        }\n      }, switchRouter.getActionCreators(route, navStateKey));\n    },\n    getStateForAction: function getStateForAction(action, state) {\n      if (!state) {\n        return _objectSpread(_objectSpread({}, switchRouter.getStateForAction(action, undefined)), {}, {\n          isDrawerOpen: false\n        });\n      }\n\n      var isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        if (action.type === DrawerActions.CLOSE_DRAWER || action.type === NavigationActions.BACK && state.isDrawerOpen) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isDrawerOpen: false\n          });\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isDrawerOpen: true\n          });\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            isDrawerOpen: !state.isDrawerOpen\n          });\n        }\n      }\n\n      var switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        return null;\n      }\n\n      if (switchedState !== state) {\n        if (getActiveRouteKey(switchedState) !== getActiveRouteKey(state) && state.isDrawerOpen) {\n          return _objectSpread(_objectSpread({}, switchedState), {}, {\n            isDrawerOpen: false\n          });\n        }\n\n        return switchedState;\n      }\n\n      return state;\n    }\n  });\n});","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["obj","getActiveRouteKey","route","config","withDefaultValue","switchRouter","SwitchRouter","getActionCreators","openDrawer","key","navStateKey","closeDrawer","toggleDrawer","getStateForAction","isDrawerOpen","isRouterTargeted","action","state","DrawerActions","NavigationActions","switchedState"],"mappings":"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","sourcesContent":["import {\n  SwitchRouter,\n  NavigationActions,\n  NavigationAction,\n  NavigationRoute,\n  NavigationRouteConfigMap,\n} from 'react-navigation';\nimport * as DrawerActions from './DrawerActions';\n\ntype State = NavigationRoute & {\n  isDrawerOpen?: any;\n};\n\nfunction withDefaultValue(obj: object, key: string, defaultValue: any): any {\n  // @ts-ignore\n  if (obj.hasOwnProperty(key) && typeof obj[key] !== 'undefined') {\n    return obj;\n  }\n\n  // @ts-ignore\n  obj[key] = defaultValue;\n  return obj;\n}\n\nconst getActiveRouteKey = (route: NavigationRoute): string => {\n  if (\n    route.routes &&\n    typeof route.index === 'number' &&\n    route.routes[route.index]\n  ) {\n    return getActiveRouteKey(route.routes[route.index]);\n  }\n\n  return route.key;\n};\n\nexport default (\n  routeConfigs: NavigationRouteConfigMap<any, any>,\n  config: {\n    unmountInactiveRoutes?: boolean;\n    resetOnBlur?: boolean;\n    initialRouteName?: string;\n  } = {}\n) => {\n  config = { ...config };\n  config = withDefaultValue(\n    config,\n    'resetOnBlur',\n    config.unmountInactiveRoutes ? true : !!config.resetOnBlur\n  );\n  config = withDefaultValue(config, 'backBehavior', 'initialRoute');\n\n  const switchRouter = SwitchRouter(routeConfigs, config);\n\n  return {\n    ...switchRouter,\n\n    getActionCreators(route: NavigationRoute, navStateKey: string) {\n      return {\n        openDrawer: () => DrawerActions.openDrawer({ key: navStateKey }),\n        closeDrawer: () => DrawerActions.closeDrawer({ key: navStateKey }),\n        toggleDrawer: () => DrawerActions.toggleDrawer({ key: navStateKey }),\n        ...switchRouter.getActionCreators(route, navStateKey),\n      };\n    },\n\n    getStateForAction(action: NavigationAction, state?: State) {\n      // Set up the initial state if needed\n      if (!state) {\n        return {\n          ...switchRouter.getStateForAction(action, undefined),\n          isDrawerOpen: false,\n        };\n      }\n\n      const isRouterTargeted = action.key == null || action.key === state.key;\n\n      if (isRouterTargeted) {\n        // Only handle actions that are meant for this drawer, as specified by action.key.\n        if (\n          action.type === DrawerActions.CLOSE_DRAWER ||\n          (action.type === NavigationActions.BACK && state.isDrawerOpen)\n        ) {\n          return {\n            ...state,\n            isDrawerOpen: false,\n          };\n        }\n\n        if (action.type === DrawerActions.OPEN_DRAWER) {\n          return {\n            ...state,\n            isDrawerOpen: true,\n          };\n        }\n\n        if (action.type === DrawerActions.TOGGLE_DRAWER) {\n          return {\n            ...state,\n            isDrawerOpen: !state.isDrawerOpen,\n          };\n        }\n      }\n\n      // Fall back on switch router for screen switching logic, and handling of child routers\n      const switchedState = switchRouter.getStateForAction(action, state);\n\n      if (switchedState === null) {\n        // The switch router or a child router is attempting to swallow this action. We return null to allow this.\n        return null;\n      }\n\n      // Has the switch router changed the state?\n      if (switchedState !== state) {\n        // If any navigation has happened, and the drawer is maybe open, make sure to close it\n        if (\n          getActiveRouteKey(switchedState) !== getActiveRouteKey(state) &&\n          state.isDrawerOpen\n        ) {\n          return {\n            ...switchedState,\n            isDrawerOpen: false,\n          };\n        }\n\n        // At this point, return the state as defined by the switch router.\n        // The active route key hasn't changed, so this most likely means that a child router has returned\n        // a new state like a param change, but the same key is still active and the drawer will remain open\n        return switchedState;\n      }\n\n      return state;\n    },\n  };\n};\n"]},"metadata":{},"sourceType":"module"}